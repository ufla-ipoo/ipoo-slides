---
title: IPOO - Cap. 5 Comportamento Mais Sofisticado
subtitle: Aula 5.2 - Teórica
---

## {.smaller}

Na aula teórica anterior nós melhoramos as respostas do sistema de suporte acrescentando uma sequência de `if\else if` no método `gerarResposta`.

- fazendo com que a resposta dada tivesse relação com a pergunta do usuário.
- E isso foi feito verificando-se palavras-chave como: _lento_, _bug_, etc.

. . .

Mas repare que essa forma de implementação tem uma desvantagem importante:

- Se quisermos evoluir o sistema acrescentando novas respostas (para novas palavras-chave), teríamos que modificar o método `gerarResposta` e recompilar o sistema.
- O ideal era que essas informações viessem de um arquivo e pudéssemos utilizá-las sem precisar modificar o código e recompilar o sistema.

## {.smaller}

Supondo que tivéssemos uma forma de ler os dados de arquivo, nós poderíamos tratar essas informações utilizando a classe `HashMap`.

- Nesta aula vamos conhecer os conceitos que envolvem essa classe.
- E como ela pode ser bem útil em nossos sistemas.

. . .

Mas antes disso, vamos entender um pouquinho mais sobre a palavra-chave `import`.

# Pacotes e `import` {background-color="#40666e"}

## {.smaller}

Nos exercícios da aula teórica anterior, você provavelmente usou as linhas de código abaixo:

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
import java.util.ArrayList;
import java.util.Random;
```
:::

. . . 

Nós já usamos `import` antes, mas vamos agora entender um pouco mais sobre ele.

## {.smaller}

As classes da biblioteca de classes do Java não ficam disponíveis automaticamente, como as outras classes do projeto.

- Para usá-las precisamos informar isso para o compilador.
- Esse processo é chamado de [importação]{.alert} de classe.
  - E é feito usando a palavra-chave `import`.

. . .

O comando `import` tem o seguinte formato:

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
import nome_qualificado_da_classe;
```
:::

## {.smaller}

Como a biblioteca de classes do Java possui milhares de classes,

- é necessário ter alguma forma de organização que facilite a utilização delas.

. . .

Java usa [pacotes]{.alert} para organizar as classes em grupos.

- E os pacotes podem ser aninhados (ou seja, os pacotes podem conter outros pacotes).

## {.smaller}

As classes `ArrayList` e `Random`, por exemplo, fazem parte do pacote `java.util`.

- Nós podemos ver essa informação na documentação das classes.

. . .

O **nome completo** ou **nome qualificado** de uma classe é:

- o nome do seu pacote, seguido de um ponto, seguido do nome da classe.
- Assim, o nome completo da classe `ArrayList`, por exemplo, é: `java.util.ArrayList`.

## {.smaller}

Java também nos permite importar pacotes completos com o comando:

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
import nome_do_pacote.*;
```
:::

. . .

Portanto, o comando abaixo importaria todas as classes do pacote `java.util`:

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
import java.util.*;
```
:::

. . .

Mas, apesar da linguagem permitir isso, é uma boa prática importar apenas as classes que você realmente vai usar.

- A vantagem é a legibilidade, pois fica claro quais classes são realmente necessárias.

## {.smaller}

Há uma exceção a essas regras de pacotes:

- Algumas classes são tão usadas que seriam importadas em quase todas as classes que implementamos.
- Essas classes pertecem ao pacote `java.lang`.

. . .

Esse pacote é importado automaticamente pelo compilador em todas as classes.

- Portanto, não precisamos usar o comando `import` para esse pacote.
- A classe `String` é um exemplo de classe desse pacote.


# Usando mapas para associações {background-color="#40666e"}

## {.smaller}

Um [Mapa]{.alert} é uma **coleção de pares de objetos chave-valor**.

- Assim como um `ArrayList`, um Mapa pode guardar uma quantidade flexível de entradas.
- Mas uma diferença importante é que em um Mapa, uma entrada não é um objeto, e sim um **par de objetos**.
  - Este par é formado por um objeto **chave** e um objeto **valor**.

. . .

Enquanto com `ArrayList` buscamos objetos pela sua posição,

- com um Mapa, usamos o objeto chave para buscar o objeto valor associado a ele.

## {.smaller}

Você consegue pensar em um exemplo de Mapa, ou seja, de coleção de dados organizados na forma de pares chave/valor?

- Um exemplo bem comum de um Mapa é a lista de contatos de um celular.
- A lista de contatos tem entradas, e cada entrada é um par: um nome e um número de telefone.

. . .

Usamos a lista de contatos procurando por um nome e, ao encontrá-lo, obtemos o número de telefone associado a ele.

- Nós não procuramos os contatos por um índice ou posição.
- Portanto, nós **buscamos um valor** (o número de telefone), **a partir de uma chave** (o nome)

## {.smaller}

Na lista de contatos de um celular poderíamos ter uma coleção como a seguinte:

| Nome    | Número    |
|---------|-----------|
| Tião    | 9999 1111 |
| Maria   | 8888 1234 |
| Joaquim | 9876 5432 |

. . .

Neste exemplo:

- A primeira entrada tem a chave `"Tião"` e o valor `"9999 1111"`. 
- Eu poderia buscar um número a partir da chave `"Maria"`.
  - E a resposta a esta busca seria `"8888 1234"`.

## {.smaller}

Você consegue pensar em outros exemplos de coleções na forma de Mapa que usamos no dia a dia?

. . .

Um **dicionário**:

- Buscamos um significado (valor) a partir de uma palavra (chave).

. . .

**Siglas e nomes de estados**:

- Podemos buscar o nome de um estado (valor) a partir de sua sigla (chave).

. . .

**Uma coleção de alunos**:

- Podemos buscar um objeto aluno (valor) a partir da sua matrícula (chave).

. . .

::: {.callout-tip title="Conceito" icon=false}
Um **mapa** é uma coleção que guarda pares chave/valor como entradas.
Valores podem ser buscados forncendo-se a chave correspondente. 
:::

## {.smaller}

![](imagens/balao_como_usar_estrutura_mapa.png){.r-stretch}

. . . 

A forma mais simples de usar essa estrutura é através da classe `HashMap`.

- `HashMap` é uma implementação particular de `Mapa`.


## {.smaller}

Os métodos mais importantes da classe `HashMap` são: `put` e `get`.

- O método `put` insere uma entrada no mapa (um par de objetos chave/valor).
- Já o método `get` recupera o valor associado a uma chave.

. . .

O trecho de código abaixo cria um `HashMap` e insere nele três entradas.

- Cada entrada é um par chave/valor consistindo de um nome e um número de telefone.

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
    HashMap<String,String> contatos = new HashMap<>();
    contatos.put("Tiao", "9999 1111");
    contatos.put("Maria", "8888 1234");
    contatos.put("Joaquim", "9876 5432");
```
:::

## {.smaller}

Quando declaramos uma variável do tipo `HashMap` e quando criamos um objeto `HashMap`

- precisamos informar o tipo dos objetos que serão guardados.
- Assim como fazemos com `ArrayList`. 

. . .

No caso do `HashMap`, precisamos informar dois tipos: 

- o tipo dos objetos chave e o tipo dos objetos valor.

. . .

No caso da lista de contatos, por exemplo, definimos que tanto a chave quanto o valor são objetos do tipo `String`.

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
    HashMap<String,String> contatos = new HashMap<>();
```
:::

## {.smaller}

O trecho de código abaixo encontra e exibe o telefone da Maria.

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
    String telefone = contatos.get("Maria");
    System.out.println("Telefone da Maria: " + telefone);
```
:::

. . . 

Repare que passamos a chave (o nome `"Maria"`) para o método `get` e ele nos retorna o valor (o número do telefone dela).

. . .

::: {.callout-note title="Exercício" icon=false}
Leia a documentação dos métodos `get` e `put` da classe `HashMap` e veja se a explicação bate com o que você está entendendo até o momento.
:::

##

::: {.callout-note title="Exercício [(entrega)]{.alert}" icon=false}
::: {.nonincremental}
Crie no BlueJ um projeto chamado `contatos-hashmap`.

Crie uma classe chamada `Contatos` e use um `HashMap` para implementar uma lista de contatos
similar à que vimos anteriormente. Lembre-se que você deve importar `java.util.HashMap`.

Na classe, implemente dois métodos:

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
    public void cadastrarNumero(String nome, String numero)
``` 
:::

e

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
    public String buscarNumero(String nome)
``` 
:::

Os métodos devem usar os métodos `put` e `get` da classe `HashMap` para implementar suas funcionalidades.
:::
:::

## 

Para os exercícios a seguir, você pode usar a [documentação](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/HashMap.html) oficial da classe `HashMap` do Java.

. . .

::: {.callout-note title="Exercício" icon=false}
Verifique na documentação como podemos saber quantas entradas estão guardadas em um `HashMap`.
:::

::: {.callout-note title="Exercício" icon=false}
Experimente com o BlueJ o que acontece quando você adiciona uma entrada em uma mapa com uma chave que já existia no mapa.
:::

::: {.callout-note title="Exercício" icon=false}
Experimente com o BlueJ o que acontece quando você adiciona duas entradas em uma mapa com o mesmo valor, mas com chaves diferentes.
:::

## 

::: {.callout-note title="Exercício" icon=false}
Como você pode verificar se uma chave existe em um mapa? Escreva um código Java de exemplo.
:::

::: {.callout-note title="Exercício" icon=false}
Experimente com o BlueJ o que acontece quando você tenta procurar um valor e a chave fornecida não existe no mapa.
:::

::: {.callout-note title="Exercício" icon=false}
Como podemos imprimir todas as chaves que estão armazenadas em um `HashMap`.
:::

##

::: {.callout-note title="Exercício [(entrega)]{.alert}" icon=false}
Altere o projeto `contatos-hashmap`, criando uma classe chamada `TestesHashMap`.

Nesta classe, implemente um método chamado `testar` que demonstre todas as funcionalidades que você experimentou nos exercícios dos slides anteriores.
::: 

# Usando um mapa no sistema de suporte {background-color="#40666e"}

## {.smaller}

Na aula passada você fez um exercício para que o sistema de suporte desse respostas que tivessem relação com a reclamação do usuário.

```{.java code-line-numbers="false"}
    if (entrada.contains("lento")) {
        return "Acredito que isso tem a ver com o seu hardware. " +
               "Atualizar seu processador deve resolver todos os " +
               "problemas de desempenho. Você tem algum problema " + 
               "com nosso software?"
    }
    else if (entrada.contains("bug")) {
        ...
``` 

. . .

Mas tratar isso usando blocos `if\else if` não é a melhor forma implementar.

- Isso porque a cada nova palavra-chave tratada, teríamos que alterar o código e recompilar o sistema.

## {.smaller}

Nós podemos melhorar essa implementação usando um `HashMap`.

- A ideia é ter um mapa que relacione palavras como `"lento"` e `"bug"` com as respostas correspondentes a estas palavras.
- Portanto, o mapa terá como chave uma `String` e como valor também uma `String`.

. . .

Nos próximos exercícios vamos fazer essa implementação.

- Nós vamos colocar as entradas do `HashMap` diretamente no código.
- E, portanto, alguém pode argumentar que isso não é muito diferente de usar `if\else if`.
- Mas, a inclusão das entradas no `HashMap` poderia ser feita a partir de um arquivo, por exemplo.
  - E, assim, poderíamos acrescentar novas palavras-chave no arquivo sem precisar recompilar o sistema.

##

::: {.callout-note title="Exercício [(entrega)]{.alert}" icon=false}
::: {.nonincremental}
Altere a classe a classe `Respondedor` do projeto [suporte-tecnico1](https://github.com/ufla-ipoo/suporte-tecnico1) para que ela tenha um atributo mapa para guardar as palavras-chaves e as respostas.

Crie um método chamado `preencherMapaDeRespostas` que preenche o mapa com as respostas que você tinha tratado como `if\else if` na aula anterior. Chame o método no construtor da classe.

Por fim, altere o método `gerarResposta` da seguinte forma:

- Ele deve ter um loop para percorrer as chaves do mapa.
- Dentro do loop deve verificar se a variável `entrada` contém a chave.
  - Se sim, ele deve retornar o valor associado a esta chave.
- Se o loop terminar e a `entrada` não tiver nenhuma das chaves, ele deve retornar uma resposta padrão.
  - Por exemplo, "Desculpe, não entendi o que você quis dizer. Poderia reformular a pergunta?".
::: 
:::


# Conjuntos (`sets`) {background-color="#40666e"}

## {.smaller}

A biblioteca de classes do Java possui diferentes tipos de [conjuntos](.alert) implementados em diferentes classes.

- Uma delas é a classe `HashSet`.

. . .


::: {.callout-note title="Exercício" icon=false}
Busque na documentação do Java, ou em outras fontes, quais são as similaridades e as diferenças enre
um `HashSet` e um `ArrayList`.

Tente entender porque `ArrayList` é um caso especial de `List` e `HashSet` é um caso especial de `Set`.
:::

## {.smaller}

A declaração de um `HashSet`, a criação do objeto e a adição de elementos é feita da mesma forma que um `ArrayList`.

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
    import java.util.HashSet;
    . . .
    HashSet<String> conjunto = new HashSet<>();
    conjunto.add("um");
    conjunto.add("dois");
    conjunto.add("três");
```
:::

. . . 

Para percorrer um `HashSet` podemos usar um for-each, igualzinho ao que usamos para `ArrayList`.

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
    for(String elemento : conjunto) {
        // faz alguma coisa com o elemento.
    }
```
:::

## {.smaller}

Repare, portanto, que **usar diferentes coleções** em Java **é** sempre **muito parecido**.

- Se você entender como usar uma delas, você conseguirá usar as outras com facilidade.

. . .

As **diferenças** entre as coleções **estão nos** seus **comportamentos**.

- Uma lista, por exemplo, mantém a ordem dos elementos, permite acesso aos elementos por posição, e permite elementos repetidos.
- Já um conjunto não mantém a ordem dos elementos, e garante que não existem elementos repetidos.
  - Portanto, os elementos podem ser percorridos no for-each em ordem diferente da que eles foram inseridos.
  - E inserir um mesmo elemento uma segunda vez, simplesmente não tem nenhum efeito.


# Escrevendo documentação de classes {background-color="#40666e"}

## {.smaller}

Quando estamos trabalhando em nossos projetos, 

- é importante escrevermos a **documentação de nossas classes**, à medida que desenvolvemos o código.

- Muitas vezes programadores não levam a sério a documentação, o que pode levar a sérios problemas.

. . .

Se você não fornecer documentação suficiente, pode ser difícil para outro programador entender suas classes.

- Muitas vezes esse outro programador pode ser você mesmo :)

. . .

Sem documentação, precisamos ler o código da classe para tentar entender como ela funciona.

- Isso pode funcionar em um projeto pequeno de estudante.
- Mas cria problemas em projetos do mundo real.

## {.smaller}

É muito comum que sistemas comerciais tenham centenas de milhares de linhas de código.

- Imagine que você tivesse que ler todas essas linhas para entender como o código funciona.
- Seria impossível!

. . . 

Nós conseguimos usar as classes da biblioteca Java, como `HashSet` e `Random`, olhando apenas a documentação delas.

- Nós nunca precisamos olhar o código-fonte destas classes.

. . . 

Isso funciona porque as classes estão suficientemente bem documentadas.

- Seria muito mais difícil usar essas classes, se precisássemos ler e entender o código-fonte delas primeiro.

## {.smaller}

Em uma equipe de desenvolvimento de software, a implementação das classes é geralmente dividida entre vários programadores.

- Um programador poderia implementar a classe `SistemaDeSuporte`, por exemplo, e outro a classe `LeitorDeEntrada`.
- Portanto, você pode precisar implementar uma classe enquanto chama métodos de outras classes.

. . .

Assim, o mesmo argumento usado para as classes da biblioteca Java vale para as classes que você escreve.

- Se podemos usar as classes sem ter que ler e entender toda a implementação, nossa tarefa fica mais fácil.
- Nós precisamos apenas da interface das classes e não da implementação.
- Portanto, precisamos escrever boa documentação de classes também para as nossas próprias classes.

. . .

::: {.callout-tip title="Conceito" icon=false}
A **documentação** de uma classe deve ser detalhada o suficiente para que outros programadores
consigam usar a classe sem precisar ler o código fonte.
:::

## {.smaller}

O Java tem uma ferramenta chamada [javadoc](.alert) que gera documentação a partir de comentários no código.

- Toda a documentação oficial das classes da biblioteca Java é gerada com o javadoc.

. . .

O BlueJ usa o javadoc para gerar documentação das classes.

- Com o código de uma classe aberto no BlueJ, podemos acessar a caixa de opções no canto superior direito e mudar de _código-fonte_ para _documentação_.

- Ou podemos também usar o menu `Ferramentas` &rarr; `Documentaçao do Projeto` para gerar a documentação de todas as classes do projeto.

##

::: {.callout-note title="Exercício" icon=false}
Experimente acessar a documentação da classe `SistemaDeSuporte` no BlueJ.
:::

. . .

::: {.fontsize70}
Os arquivos HTML gerados ficam em uma pasta `doc` dentro do projeto e podem ser abertos em qualquer navegador.
:::

## {.smaller}

A **documentação de uma classe** deveria incluir, no mínimo:

- O nome da classe.
- Um comentário descrevendo o objetivo e as características da classe.
- Um número de versão.
- O nome do(s) autor(es).
- Documentação para cada construtor e para cada método.

## {.smaller}

A **documentação de todo construtor e método** deve incluir, no mínimo:

- O nome do método.
- O tipo de retorno.
- Os nomes e tipos dos parâmetros.
- Uma descrição do objetivo e função do método.
- Uma descrição de cada parâmetro.
- Uma descrição do valor retornado.

. . .

Além disso, cada projeto deveria ter um comentário geral sobre o projeto.

- Geralmente dentro de um arquivo `README` na pasta raiz do projeto.
- No BlueJ podemos fazer esse comentário de projeto abrindo o arquivo que fica no 
canto superior esquerdo do diagrama de classses. 

## {.smaller}

Alguns elementos da documentação podem ser sempre extraídos do código-fonte.

- Como os nomes e parâmetros dos métodos, por exemplo.
- Já a descrição da classe e dos métodos demanda mais atenção já que pode ser facilmente esquecida, ou ficar incompleta.

. . .

No Java, comentários `Javadoc` são escritos com um símbolo especial de comentário.

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
/**
 * Este é um comentário Javadoc.
 * Ele pode ter várias linhas.
 */
```
:::

## {.smaller}

O comentário deve ter `/**` no início e `*/` no final para ser reconhecido como um comentário `javadoc`.

- Se o comentário vem imediatamente antes da declaração da classe, ele é lido como a descrição da classe.
- Se ele está acima de uma assinatura de método, é considerado como um comentário do método.

. . .

Como exatamente o comentário deve ser formatado para gerar a documentação pode variar de acordo com as
ferramentas de cada linguagem de programação.

. . .

No caso do `javadoc` várias palavras-chave especiais estão disponíveis para formatar a documentação.

- Essas chaves começam com `@`, como, por exemplo:
  - `@version`
  - `@author`
  - `@param`
  - `@return`

## 

::: {.callout-note title="Exercício" icon=false}
Encontre exemplos de palavras-chave `javadoc` no projeto do sistema de suporte e 
verifique como eles influenciam a formatação da documentação.

Experimente fazer alterações e conferir o resultado na documentação gerada.
:::

::: {.callout-note title="Exercício [(entrega)]{.alert}" icon=false}
::: {.nonincremental}
Documente adequadamente as classes do projeto de suporte técnico e gere a documentação
usando o BlueJ.

Confira se a documentação gerada está completa antes de enviar o projeto.
:::
:::


# Entregas dessa Aula {background-color="#40666e"}

## {.smaller}

::: {.nonincremental}

Para ter **presença** nessa aula teórica ANP, demostrando que você estudou o conteúdo, você deve fazer a atividade abaixo.

::: {.callout-important title="Entregas no Campus Virtual"}
Responda às duas tarefas no Campus Virtual enviando os seus projetos `contatos-hashmap` e `suporte-tecnico1` com as alterações dos exercícios solicitados ao longo dos slides.
:::

:::
