---
title: IPOO - Cap. 2 Entendendo as Definições de Classes
subtitle: Aula 2.1 - Teórica
---

## Como estudar esse conteúdo? {.smaller}

Relembrando as [dicas]{.alert}:

:::: {.columns}

::: {.column width="70%"}

- É essencial **praticar enquanto estuda**, usando o BlueJ.
- Ajuda muito se você **ler o capítulo do livro** da disciplina para tirar dúvidas e complementar o que está sendo estudado.
- Use um caderno e caneta para [anotar]{.alert} os principais [conceitos]{.alert} e eventuais [dúvidas]{.alert} que surgirem.

:::

::: {.column width="30%"}
![](imagens/bluej_completo_vertical.png){fig-alt="Prints do BlueJ." width=50%}
![](imagens/livro_bluej.png){fig-alt="Capa do livro do Barnes e Kolling." fig-align="left" width=50%}
:::


::::

## Observações sobre o livro {.smaller}

Gostaria de ressaltar algumas observações sobre o livro:

:::: {.columns}

::: {.column width="30%"}
![](imagens/livro_bluej.png){fig-alt="Capa do livro do Barnes e Kolling." fig-align="left"}
:::

::: {.column width="70%"}
- Para construir os slides usei também a 6ª edição do livro (que só tem em inglês).
  - Portanto, os slides podem ter coisas a mais ou ligeiramente diferentes que o livro.
- Apesar do livro ser em português, todo o código nele é em inglês.
  - Nos slides, vocês podem notar que traduzi todos os códigos para ficar mais fácil entender.
- Os exercícios no slide nem sempre são iguais aos do livro.
  - Portanto, sigam o enunciado dos slides.
- Nem sempre uso a mesma tradução do livro
  - Em alguns casos por simples preferência pessoal (ex: prefiro *atributo* que *campo*).
  - Em outros casos porque tentei fazer uma tradução melhor.
:::

::::

## Principais Conceitos do Capítulo {.smaller}

::: {.nonincremental}
- Atributos
- Construtores
- Parâmetros
- Métodos (de acesso e modificação)
:::

. . .

Construções Java do capítulo

::: {.nonincremental}
- Atributo, construtor, comentário, parâmetro, atribuição (`=`), bloco, comando de retorno, `void`, operadores de atribuição compostos (`+=`, `-=`), comando `if`.
:::

. . .

Neste capítulo vamos começar a examinar em mais detalhes o código-fonte de uma classe.

- Vamos discutir os elementos básicos de uma classe: *atributos*, *construtores* e *métodos*.

# Máquina de Ingressos {background-color="#40666e"}

## {.smaller}

Para ilustrar os conceitos desse capítulo, vamos usar um novo projeto: uma **máquina de ingressos ingênua**

. . .

:::: {.columns}

::: {.column width="30%"}
![](imagens/maquina-ingressos.png){width="50%"}
:::

::: {.column width="70%"}
- Uma máquina de ingressos permite que o cliente coloque quantias de dinheiro e imprima seu ingresso.
- Vamos começar com uma simulação bem básica que nos permitirá avaliar os conceitos do capítulo.
  - Na próxima aula vamos melhorar nossa máquina.
:::

::::

. . .

O funcionamento básico da máquina o seguinte:

- O cliente coloca dinheiro na máquina (pode fazer isso várias vezes).
- A todo momento a máquina guarda quanto dinheiro o cliente já inseriu e o total já inserido.
- O cliente pode então solicitar a impressão do ingresso.
- Nossa máquina inicial trata apenas um tipo de ingresso.
- Mas, criando várias instâncias (objetos) da máquina, podemos ter máquinas com ingressos diferentes.

## {.smaller}

Abra então o projeto [maquina-ingressos-ingenua](https://github.com/ufla-ipoo/maquina-ingressos-ingenua) e vamos explorá-lo como fizemos para outros exemplos.

- O projeto tem uma única classe `MaquinaIngressos`.
- Ao criar um objeto da classe, você precisa informar o preço do ingresso.
  - O preço do ingresso é dado em centavos.
  - Ex.: se o ingresso custa R$ 12,00, o valor informado deve ser 1200.

. . .

::: {.callout-tip title="Conceito" icon=false}
**Criação de objetos**: alguns objetos não podem ser criados se você não fornecer informação adicional para ele.
:::

## {.smaller}

::: {.callout-note title="Exercício" icon=false}
Crie um objeto `MaquinaIngressos` e verifique os métodos disponíveis.
Chame o método `obterPreco` e confira o preço do ingresso.
Em seguida, insira uma quantia de dinheiro menor que o preço do ingresso usando o método `inserirDinheiro` e confira o saldo usando o método `obterSaldo`.
Insira mais dinheiro até ter a quantidade exata necessária para comprar o ingresso, e então chame o método `imprimirIngresso`.
:::

::: {.callout-note title="Exercício" icon=false}
Qual é o saldo da máquina depois que você compra um ingresso?
:::

::: {.callout-note title="Exercício" icon=false}
Experimente inserir quantidades diferentes de dinheiro antes de imprimir um ingresso.
Você percebeu alguma coisa estranha?
Quando você insere muito dinheiro, você recebe o troco?
O que acontece se você não colocar dinheiro suficiente e tentar imprimir um ingresso?
:::

::: {.callout-note title="Exercício" icon=false}
Tente entender bem o funciona da máquina interagindo com o objeto no BlueJ antes de ver o código na próxima seção.
Crie outra máquina que tenha ingressos de preço diferente e compre um ingresso dessa máquina.
A impressão do bilhete é diferente?
:::

# Examinando uma definição de classe {background-color="#40666e"}

## {.smaller}

Nos exercícios vimos que a máquina só funciona como deveria se inserirmos a quantidade exata de dinheiro para comprar um ingresso.

- Vamos examinar os detalhes da classe e entender porque isso está acontecendo.

. . .

Dê uma olhada no código da classe `MaquinaIngressos`, clicando duas vezes na classe no diagrama do BlueJ.

- Avaliando o código podemos identificar alguns dos conceitos de OO que vimos no capítulo 1.
- A classe tem muitas funcionalidades do Java que veremos várias vezes, portanto, avalie o código cuidadosamente.

# O cabeçalho da classe {background-color="#40666e"}

## {.smaller}

Podemos dividir o código da classe em duas partes principais.

- Uma pequena [parte externa]{.alert} que dá nome à classe (aparece com fundo verde).
- E uma [parte interna]{.alert} muito maior que faz todo o trabalho.

. . .

A parte externa tem o seguindo trecho de código

::: {.doublefontsize}
```{.java code-line-numbers="false"}
public class MaquinaIngressos
{
  // Parte interna da classe omitida
}
```
:::

. . .

A **parte externa** de todas as classe se parecem muito, já que o objetivo é [nomear a classe]{.alert}.

- Por convenção, sempre começamos o nome da classe com letra maiúscula.
- No BlueJ, vemos que antes dessa linha há um texto azul que nos diz alguma coisa sobre a classe.

## {.smaller}

::: {.callout-note title="Exercício" icon=false}
Escreva como você acha que seria a parte externa das classes `Estudante` e `Disciplina`. Não se preocupe com a parte interna.
:::

::: {.callout-note title="Exercício" icon=false}
Faz diferença escrever `public class MaquinaIngressos` ou `class public MaquinaIngressos`?

Faça essa alteração no código, feche o editor e observe a mudança no diagrama.
Clique no botão *Compilar*.
Que mensagem de erro aparece?
Ela explica claramente o que tem de errado?

Volte o código para como estava antes compile (confira se não aparece mais a mensagem de erro).
:::

::: {.callout-note title="Exercício" icon=false}
Verifique se é possível remover a palavra `public` da parte externa da classe `MaquinaIngressos` (compile o código).
:::

::: {.callout-note title="Exercício" icon=false}
Coloque a palavra `public` de volta e agora tente remover a palavra `class` e tente compilar de novo.

Volte o código original para continuar a aula.
:::

## Palavras-chave {.smaller}

As palavras `public` e `class` são parte da linguagem Java.

- Mas `MaquinaIngressos` não é.
  - Quem criou a classe é que escolheu esse nome.

. . .

Nós chamamos as palavras `public` e `class` de [palavras-chave]{.alert} ou [palavras reservadas]{.alert}.

- Há cerca de 50 palavras desse tipo em Java.
- Em breve conheceremos diversas delas.

## Atributos, construtores e métodos{.smaller}

A [parte interna]{.alert} da classe é onde nós definimos os *atributos*, *construtores* e *métodos* que fazem os objetos terem suas características e comportamentos.

. . .

Em resumo:

- [Atributos]{.alert} guardam dados dentro de um objeto.
- [Construtores]{.alert} são responsáveis por garantir que um objeto é configurado corretamente quando ele é criado.
- [Métodos]{.alert} implementam o comportamento de um objeto. Fornecem o que ele é capaz de fazer.

. . .


:::: {.columns}

::: {.column width="70%"}
No BlueJ os atributos aparecem em um fundo branco.

- Já os constrututores e métodos são mostrados em caixas amarelas.
:::

::: {.column width="30%"}
![](imagens/print_bluej_codigo.png)
:::

::::

## {.smaller}

A linguagem Java permite que os atributos, construtores e métodos sejam colocados em **qualquer ordem** dentro de uma classe.

- Mas, **geralmente**, nós colocamos **primeiro os atributos, depois os construtores e depois os métodos**.

  ::: {.doublefontsize}
  ```{.java code-line-numbers="false"}
  public class NomeDaClasse
  {
    // Atributos

    // Construtores

    // Métodos
  }
  ```
  :::

. . .

Você não é obrigado a seguir isso, mas deixa seu **código mais claro**.

- Especialmente declarar todos os atributos primeiro.

## {.smaller}

::: {.callout-note title="Exercício" icon=false}
Sabendo a ordem que os atributos, métodos e construtores são geralmente implementados em uma classe, avalie o código da classe `MaquinaIngressos` e faça uma tabela com três colunas.
Na primeira coloque os nomes dos atributos, na segunda os nomes dos construtores e, na terceira, os construtores.
*Dica*: a classe tem apenas um construtor.
:::

::: {.callout-note title="Exercício" icon=false}
A assinatura do construtor tem duas características que são diferentes dos métodos.
Você consegue descobrir quais são?
:::

# Atributos {background-color="#40666e"}

## {.smaller}

**Atributos** guardam dados dentro de um objeto.

- Atributos também são chamados de [variáveis de instância]{.alert}.
  - O nome **variável** é usado para coisas que são armazenadas na memória do computador por um programa.

. . .

:::: {.columns style='display: flex !important; height: 90%;'}

::: {.column width="30%" style='display: flex; justify-content: center; align-items: center;'}
```{.java code-line-numbers="false"}
public class MaquinaIngressos
{
  private int preco;
  private int saldo;
  private int total;

    // Construtores e métodos omitidos
}
```
:::

::: {.column width="70%"}
A classe `MaquinaIngressos`, por exemplo, tem três atributos:

- `preco`: guarda o valor fixo de cada ingresso.
- `saldo`: guarda a quantidade de dinheiro inserida na máquina por um usuário antes dele pedir para imprimir um ingresso.
- `total`: guarda o total de dinheiro inserido na máquina por todos os usuários, desde que ela foi construída (sem contar o saldo atual).
:::

::::

## {.smaller}

Atributos  (ou campos) descrevem características dos objetos.

. . .

:::: {.columns}

::: {.column width="60%"}
- Como você descreveria essa bola, por exemplo?  
- Dizendo de outra forma, como contaria como ela é para alguém que não está vendo a bola?
- Você poderia descrevê-la, informando:
  - A cor.
  - O tamanho.
  - O tipo.
  - Etc.
:::

::: {.column width="40%"}
![](imagens/lupa_bola.png)
:::

::::

. . .

:::: {.columns}

::: {.column width="70%"}

E quais seriam as características de um jogador em um jogo de videogame de futebol?

- Poderiam ser: nome, nacionalidade, altura, velocidade, agilidade, etc.
:::

::: {.column width="30%"}
![](imagens/messi_fifa_ratings.png){width="50%"}
:::

::::

. . .

Nós chamamos essas características dos objetos de [atributos]{.alert}.

## {.smaller}

Atributos podem representar coisas mais palpáveis ou coisas mais abstratas.

. . .

![](imagens/casal_fazendo_careta.png){width="30%"}

:::: {.columns}

::: {.column width="50%"}

Dada a imagem acima, por exemplo, quais seriam os atributos físicos de cada pessoa?

- Cor dos olhos.
- Estilo de roupa.
- Altura.
- Etc.

:::

::: {.column width="50%"}

::: {.fragment}
E quais seriam características mais abstratas?

- Inteligência.
- Humor.
- Beleza.
- Etc.
:::

:::

::::


## {.smaller}

Atributos são pequenos espaços dentro de um objeto que podem usados para guardar dados de forma permanente.

- Cada objeto terá espaço para cada atributo declarado na classe.

. . .

:::: {.columns}

::: {.column width="70%"}
Podemos representar um objeto como mostrado na figura ao lado.

- Cada atributo tem um espaço para guardar um valor quando o objeto for criado.
:::

::: {.column width="30%"}
![](imagens/objeto_maquina_ingressos.png)
:::

::::

. . .

::: {.callout-tip title="Conceito" icon=false}
**Atributos** guardam dados para um objeto usar. Eles também são chamados de variáveis de instância.
:::

## {.smaller}

Cada atributo tem sua própria declaração no código-fonte.

- E na linha acima de cada declaração acrescentamos uma linha de texto: o [comentário]{.alert}.

::: {.doublefontsize}
```{.java code-line-numbers="false"}
  // O preço de um ingresso desta máquina
  private int preco;
```
:::

. . .

Assim como em C++, comentários de uma única linha começam com `//`.

- Comentários de várias linhas podem começar com `/*` e terminar com `*/`.
  - Veja, como exemplo, os comentários antes do cabeçalho da classe `MaquinaIngressos`.

. . .

::: {.callout-tip title="Conceito" icon=false}
**Comentários** são inseridos em uma classe para explicar o código para leitores humanos.
Eles não alteram nada no funcionamento da classe.
:::

## {.smaller}

As declarações dos atributos da classe `MaquinaIngressos` são todas bem similares.

- Todas elas indicam que os campos são [privados]{.alert} do objeto.
  - Vamos entender melhor o que isso significa ao estudarmos o Capítulo 6.
  - Por enquanto, basta sabermos que os **atributos** devem **sempre** ser definidos como **privados**.
- Os três atributos são do tipo `int`.
  - `int` é uma **palavra-chave** do Java e indica que os atributos podem guardar valores que são números inteiros.
  - Como nossa máquina guarda os valores em centavos, o tipo inteiro é apropriado.

## {.smaller}

**Atributos** podem armazenar **valores** que **mudam** com o tempo.

- Por isso, eles também são chamados de *variáveis*.
- O atributo `saldo`, por exemplo, é alterado sempre que o usuário insere dinheiro ou imprime um ingresso.
- Podemos ter atributos que mudam muito, como `saldo` e `total`,
  - e atributos que não variam depois de inicializados, como o `preco`.
- Mais adiante veremos que existem outros tipos de váriaveis, com a mesma ideia de que são dados armazenados no computador.

## {.smaller}

:::: {.columns}

::: {.column width="50%"}
::: {.callout-note title="Exercício" icon=false}
Qual é o **tipo** de cada um dos atributos abaixo?
```{.java code-line-numbers="false"}
  private int contador;
  private Estudante monitor;
  private Computador notebook;
```
:::
:::

::: {.column width="50%"}
::: {.callout-note title="Exercício" icon=false}
Qual é o **nome** de cada um dos atributos abaixo?
```{.java code-line-numbers="false"}
  private boolean vivo;
  private Pessoa professor;
  private Jogo jogo;
```
:::
:::

::::

::: {.callout-note title="Exercício" icon=false}
Repare os tipos dos atributos nos dois exercícios anteriores.
Pelo que você sabe das convenções de nomes de classes, quais tipos você acha que são classes?
:::

::: {.callout-note title="Exercício" icon=false}
Será que a ordem das palavras na declaração de um atributo fazem diferença?
A classe `MaquinaIngressos` tem a seguinte declaração: `private int preco;`.
Experimente mudar a ordem, fechar o editor e ver como a classe fica no diagrama.
Tente compilar a classe e avalie a mensagem de erro que aparece.
Obs.: não se esqueça de voltar a declaração original.
:::

::: {.callout-note title="Exercício" icon=false}
É muito interessante quando aprendemos as coisas pela experimentação, em vez de *decorar* uma regra.
Será que, em Java, as declarações dos atributos precisam sempre terminar com ponto-e-vírgula?
Experimente você mesmo e descubra!
:::

::: {.callout-note title="Exercício" icon=false}
Escreva a declaração completa de um atributo do tipo `int` chamado `situacao`.
:::

## Quiz 2.1 {background-color="#f7fad1" .smaller}

::: {.nonincremental}
[Atributo também é chamado de:]{.alert}

a. Variável de instância.
b. Variável de classe.
c. Variável local.
d. Variável binária.
:::

# Construtores {background-color="#40666e"}

## {.smaller}

[Construtores]{.alert} têm um papel especial.

- São responsáveis por garantir que um objeto seja [configurado adequadamente quando é criado]{.alert}.
- Ou seja, garantir que esteja pronto para ser usado logo após a criação.
- Nós também costumamos chamar isso de **inicialização**.

. . .

Depois que o objeto é criado, o construtor não tem mais utilidade para aquele objeto específico.

- Portanto, não podemos chamar o construtor para um objeto já criado.

. . .

:::: {.columns}

::: {.column width="70%"}
Abaixo está o código do construtor da classe `MaquinaIngressos`.

```{.java code-line-numbers="false"}
  /**
   * Cria uma máquina que emite ingressos de um dado preço.
   * Note que o preço deve ser maior que zero, e não tem
   * nenhuma verificação para garantir isso.
   */
  public MaquinaIngressos(int custoIngresso)
  {
      preco = custoIngresso;
      saldo = 0;
      total = 0;
  }
```
:::

::: {.column width="30%"}
![](imagens/balao_inicializar_atributos.png)
:::

::::

## {.smaller}

Em Java, **construtores** têm o **mesmo nome da classe**.

- Veja que o construtor da classe `MaquinaIngressos` se chama: `MaquinaIngressos`.
- Geralmente usamos a palavra-chave `public` antes do nome do construtor.
- E construtores não têm tipo de retorno.

. . .

Existe uma relação direta entre o que acontece no corpo de um construtor e os atributos da classe.

- Isso porque a principal responsabilidade do construtor é inicializar os atributos.
- *Obs.: corpo de um construtor ou de um método é o bloco de código que contém sua implementação. Ou seja, é tudo que tem entre `{` e `}` logo após a assinatura.*
- Atributos podem ser inicializados com constantes.
  - Como é o caso do `saldo` e `total` que são inicializados com zero.
- Ou podem ser inicializados por valores determinados externamente à classe.
  - E que são passados para o construtor por parâmetro.
  - Como é o caso do atributo `preco`.


## {.smaller}


:::: {.columns}

::: {.column width="40%"}
![](imagens/porque_parametro_construtor.png)
:::

::: {.column width="60%"}
::: {.fragment}
A questão é que podem ser criadas várias máquinas (instâncias) a partir da classe `MaquinaIngressos`.

- E cada máquina pode trabalhar com ingressos de preços diferentes.
- Portanto, não temos como saber o preço do ingresso de uma máquina específica, até que ela seja criada.
:::
:::

::::

. . .

Portanto, uma das principais funções de um atributo é **"lembrar" de informações externas** passada para o objeto.

- De forma que a informação continue disponível durante **todo o tempo de vida do objeto**.
- Assim, atributos servem para guardar informações que duram (são mantidas) por um tempo maior.

. . .

::: {.callout-tip title="Conceito" icon=false}
**Construtores** permitem que cada objeto seja configurado adequadamente quando é criado.
:::

## {.smaller}

:::: {.columns}

::: {.column width="60%"}
No diagrama ao lado, vemos a representação de um objeto máquina de ingressos, depois que o construtor é chamado.

- Podemos ver que ela foi criada com um preço de ingresso de 500 (R$ 5,00).
:::

::: {.column width="40%"}
![](imagens/objeto_maquina_ingressos_criado.png)
:::

::::

## {.smaller}


Em Java, se um atributo não for inicializado explicitamente no código, ele é **inicializado automaticamente** com um [valor padrão]{.alert}.

- Atributos **inteiros**, por exemplo, são inicializados automaticamente **com zero**.

. . .

:::: {.columns}

::: {.column width="40%"}
![](imagens/porque_inicializar_com_zero.png)
:::

::: {.column width="60%"}
::: {.fragment}
Há duas **vantagens**:

1. Quem lê a classe entende que realmente queremos inicializar com zero.
  
  - Se não tivéssemos colocado, a pessoa poderia ficar em dúvida se esquecemos de inicializar ou se queríamos deixar o valor padrão zero.

2. Quem lê a classe não precisa conhecer o valor padrão do Java para os atributos.
:::
:::

::::

## Quiz 2.2 {background-color="#f7fad1" .smaller}

::: {.nonincremental}
[Marque a alternativa incorreta:]{.alert}

a. Um construtor é chamado quando um objeto é criado.
b. Construtores podem receber informações externas ao objeto.
c. Construtores servem para definir valores válidos para os atributos do objeto.
d. Podemos chamar um construtor para um objeto depois que ele foi criado.
:::

# Parâmetros: recebendo dados {background-color="#40666e"}

## {.smaller}


Construtores e métodos têm funções diferentes, mas ambos podem **receber valores de fora do objeto** da mesma maneira:

- Através dos [parâmetros]{.alert}.

. . .

Nós vimos um pouco sobre parâmetros no capítulo anterior.

- Parâmetros são variáveis **definidas na assinatura de um método ou construtor**.

. . .

::: {.doublefontsize}
```{.java code-line-numbers="false"}
  public MaquinaIngressos(int custoIngresso)
```
:::

- Este construtor tem um único parâmetro `custoIngresso` de tipo `int`.
  - O mesmo tipo do campo `preco` que guardará o valor do parâmetro.

. . .

Repare que diferentemente de um atributo, um parâmetro é usado para guardar uma **informação temporária**.

- Basicamente para carregar dados de fora do objeto para dentro do seu construtor ou método.

## {.smaller}

![](imagens/diagrama_passagem_parametros.png){width=55%}

No BlueJ, um usuário envia informação externa para o objeto através da caixa de diálogo, que aparece quando um objeto máquina de ingressos é criado.

- O valor é copiado para o parâmetro `custoIngresso` do construtor da nova máquina (A).
  - A caixa "MaquinaIngressos (construtor)" ilustra o espaço adicional que é criado para o objeto somente quando o construtor é chamado.
  - Ele é chamado de *espaço do construtor*, e é usado para armazenar seus parâmetros.

## {.smaller}

Tecnicamente, nós chamamos de [parâmetro formal]{.alert} o [nome]{.alert} **do parâmetro declarado** na assinatura do construtor ou método.

- Apesar de, na prática, chamarmos simplesmente de **parâmetro**.
- Já o [valor]{.alert} passado de fora do objeto é chamado, tecnicamente, de [argumento]{.alert} ou [parâmetro real]{.alert}.
- Portanto, no exemplo anterior, `custoIngresso` é o parâmetro formal e o valor `500` é o argumento.

. . .

:::: {.columns}

::: {.column width="20%"}
![](imagens/icone_escopo.png)
:::

::: {.column width="80%"}
Um parâmetro formal está **disponível** para o objeto somente **dentro do corpo do construtor ou método** que onde ele é declarado.

- Dizemos que este é o [escopo]{.alert} do parâmetro.
- Veja que o **escopo** de um atributo é diferente, pois ele pode ser acessado em qualquer lugar dentro da classe.
:::

::::

## {.smaller}

:::: {.columns}

::: {.column width="20%"}
![](imagens/tempo_de_vida.png)
:::

::: {.column width="80%"}
[Tempo de vida]{.alert} de uma variável é um conceito relacionado à escopo.

- Um **parâmetro só existe durante** uma única **chamada do construtor ou do método**.
- Quando o construtor é chamado, o espaço do construtor é criado e, depois que ele termina, esse espaço desaparece.
- Portanto, o tempo de vida de um parâmetro é limitado a uma única chamada do construtor.
:::

::::

. . .

Repare que é diferente do **tempo de vida de um atributo**.

- O tempo de vida de um atributo é o mesmo do objeto.
- Ou seja, ele existe a partir do momento que o objeto é criado e até ele ser destruído.

. . .

::: {.callout-tip title="Conceito" icon=false}
O **escopo**  de uma variável define o trecho de código a partir do qual a variável pode ser acessada.
:::

. . .

::: {.callout-tip title="Conceito" icon=false}
O **tempo de vida** de uma variável indica quanto tempo ela vai existir até ser destruída.
:::

## {.smaller}

::: {.callout-note title="Exercício" icon=false}
A qual classe pertence o construtor abaixo?
```{.java code-line-numbers="false" }
public Estudante(String nome)
```
:::

::: {.callout-note title="Exercício" icon=false}
Quantos parâmetros tem o construtor abaixo e quais são seus tipos?
```{.java code-line-numbers="false"}
public Livro(String titulo, double preco)
```
:::

::: {.callout-note title="Exercício" icon=false}
Apenas pela assinatura do construtor do exercício anterior, você conseguiria chutar alguma coisa sobre os nomes e tipos dos atributos da classe `Livro`?
:::

## {.smaller}

![](imagens/fica_a_dica.png)

Repare que os nomes que escolhemos para os atributos e parâmetros indicam para que eles servem.

- Apenas lendo os nomes `preco`, `custo`, `titulo` e `vivo`, já podemos ter uma noção de sua utilidade

- Portanto, apesar da linguagem Java permitir que você dê qualquer nome, evite nomes sem sentido como `a`, `b` ou `x1`, `x2`.

## {.smaller}

Como vocês já aprenderam em disciplinas anteriores de programação, nós usamos o operador `=` para [atribuir]{.alert} valores a variáveis.

- Assim, o comando:
  ```{.java code-line-numbers="false" } 
  preco = custoIngresso;
  ```
  Indica que o valor do parâmetro `custoIngresso` será copiado para o atributo `preco`.
- [Dica]{.alert}:
  - Geralmente a gente lê o comando acima assim: *"preço igual a custo do ingresso"*
  - Mas eu acho que fica **mais fácil entender** se usarmos a palavra ***recebe***.
  - Repare a diferença: *"preço recebe custo do ingresso"*

. . .

:::: {.columns}

::: {.column width="60%"}
![](imagens/diagrama_passagem_parametros.png){width=80%}
:::

::: {.column width="40%"}
No diagrama, a atribuição é representada pela seta indica pela letra (B).
:::

::::

## {.smaller}

O lado direito (o que vem depois do `=`) é chamado [expressão]{.alert}.

- Uma expressão pode ser um único valor (como `custoIngresso`).
- Ou algo mais complexo, como o resultado de uma cálculo.

. . .

Em Java, o tipo do resultado da expressão tem que ser **o mesmo tipo** da variável.

- Ex.: não podemos guardar um resultado inteiro em uma variável string.

. . .

::: {.callout-tip title="Conceito" icon=false}
**Comandos de atribuição** guardam os valores representados pelo lado direito do comando na variável nomeada do lado esquerdo.
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Suponha que uma classe `Cachorro` tem um atributo `nome`.
Escreva o comando de atribuição que inicializa o atributo `nome`, sabendo que a assinatura do construtor da classe é `public Cachorro(String nomeCachorro)`.
:::

::: {.callout-note title="Exercício" icon=false}
A linha de código abaixo cria um objeto, chamando o construtor da classe `Date`.
```{.java code-line-numbers="false"}
  new Date("Setembro", 1, 2023)
```
Você conseguiria escrever a assinatura do construtor da classe `Date`?
Obs.: escolha nomes representativos para os parâmetros.
:::

## Quiz 2.3 {background-color="#f7fad1" .smaller}

::: {.nonincremental}
[Complete a frase: _______ tem tempo de vida igual ao do objeto:]{.alert}

a. Parâmetros.
b. Atributos.
c. Métodos.
d. Classes.
:::

# Métodos {background-color="#40666e"}

## {.smaller}

Analisando o código-fonte da classe `MaquinaIngressos` podemos ver que ela tem quatro [métodos]{.alert}.

- Os métodos são mostrados em caixas amarelas no BlueJ.

. . .

Veja, por exemplo, a implementação do método `obterPreco`.

- Vemos que os métodos têm duas partes: a **assinatura** e o **corpo** do método.
- Vemos também que antes da assinatura há um comentáro que descreve o método.

```{.java code-line-numbers="false"}
public class MaquinaIngressos
{
  // atributos ommitidos
  // construtor omitido
  /**
   * Retorna o preço do ingresso.
   */
  public int obterPreco()
  {
    return preco;
  }  
  // métodos restantes omitidos
```
. . .

::: {.callout-tip title="Conceito" icon=false}
Métodos são formados por duas partes: assinatura e corpo.
:::

## {.smaller}

Repare que a assinatura do método se parece um pouco com a declaração de atributo.

- Como então sabemos que é um método e não um atributo?
  - Repare que a assinatura `public int obterPreco()` possui parênteses e não termina com ponto-e-vírgula.

. . .

O corpo do método, que é o que fica entre chaves `{` `}`, pode conter **declarações** e **comandos**.

- Eles definem o que o objeto faz quando o método é chamado.
- Declarações servem para criar variáveis temporárias adicionais.
- E os comandos são as ações feitas pelo método.

. . .

Nós chamamos de [bloco de código]{.alert} o conjunto de declarações e comandos que ficam entre um par de chaves.

- Vemos então que o corpo da classe `MaquinaIngressos` define um bloco de código.
- O corpo do construtor e de cada método também definem blocos de código.



## {.smaller}

Tanto construtores quanto métodos podem ter **quaisquer quantidades de parâmetros** (inclusive nenhum).

. . .

Mas como podemos diferenciar um contrutor de um método?

- Note que **construtores não têm tipo de retorno** enquanto métodos têm
  - Obs.: o tipo de retorno aparece antes do nome do método.
  ```{.java code-line-numbers="false"}
  public MaquinaIngressos(int custoIngresso)
  public int obterPreco()
  ```
- Além disso, **construtores possuem o mesmo nome da classe**.

## {.smaller}

O corpo do método `obterPreco` tem apenas um comando.

::: {.doublefontsize}
```{.java code-line-numbers="false"}
  return preco;
```
:::

- Esse comando é chamado [comando de retorno]{.alert}.
- Ele deve retornar um valor que seja do mesmo tipo do método.
- E deve ser sempre o último comando do método
  - pois depois dele nenhum outro comando é executado no método.

. . .

Podemos pensar em uma **chamada de método** como **uma pergunta** feita ao objeto.

- Quando o método `obterPreco` é chamado é como se fosse feita a pergunta *Quanto custa o ingresso?* para o objeto.
- Nesse caso específico, o objeto não precisa fazer nenhuma conta, já que ele tem o valor do ingresso guardado no atributo `preco`.
  - Mas veremos que métodos podem precisar de códigos mais complexos para retornar uma informação.

# Métodos de acesso e modificadores {background-color="#40666e"}

## {.smaller}

Nós chamamos de [métodos de acesso]{.alert} os métodos que começam com **obter** (como `obterPreco` e `obterSaldo`).

- Porque eles retornam uma informação do **estado do objeto** para quem chamou o método.
- Ou seja, eles fornecem **acesso** ao estado do objeto.

. . .

Métodos de acesso têm um comando de retorno.

- Porque eles retornam, ou repassam, uma informação do objeto para quem chamou o método.

## {.smaller}

:::: {.columns}

::: {.column width="20%"}
![](imagens/fica_a_dica.png)
:::

::: {.column width="80%"}
::: {.callout-note title="Convenção" appearance="simple" icon=false}
Em inglês, usamos a palavra `get` em vez de `obter`.

- Assim, geralmente todos o métodos de acesso começam com a palavra `get`.
  - Ex.: `getPrice`, `getBalance`, etc.
- Isso é tão comum que até em códigos em português costumamos usar a palavra `get`.
  - Ex.: `getPreco`, `getSaldo`, etc.
- Obs.: nesse material vou preferir usar sempre `obter`, mas fique à vontade para escolher o que prefere.
:::
:::

::::

. . .

::: {.callout-tip title="Conceito" icon=false}
**Métodos de acesso** retornam informações sobre o estado de um objeto.
:::

## {.smaller}

::: {.callout-note title="Exercício" icon=false}
Compare as assinaturas e os corpos dos métodos `obterSaldo` e `obterPreco`.
O que eles têm de diferente?
:::

::: {.callout-note title="Exercício" icon=false}
Qual seria a pergunta feita ao objeto máquina de ingressos na chamada do método `obterSaldo`?
:::

::: {.callout-note title="Exercício" icon=false}
Como você acha que seria a implementação de um método `obterTotal`?
:::

::: {.callout-note title="Exercício" icon=false}
Experimente excluir o comando de retorno do método `obterPreco`.
Qual mensagem de erro aparece quando você tenta compilar a classe?
:::

::: {.callout-note title="Exercício" icon=false}
Além da diferença de nome, o que mais há de diferente nas assinaturas dos métodos `obterPreco` e `inserirDinheiro`.
Você acha que isso pode ter algo a ver com o fato de que o primeiro método tem comando de retorno e o segundo não?
:::



## {.smaller}

Os métodos **obter** da classe `MaquinaIngressos` retornam valores dos atributos da classe.

- Os demais métodos (`inserirDinheiro` e `imprimirIngresso`) têm um papel muito mais importante.
- Principalmente porque eles **mudam** o valor de **um ou mais atributos** do objeto toda vez que são chamados.

. . .

Nós chamamos os métodos que **mudam o estado de seus objetos** de [métodos modificadores]{.alert}.

- Podemos pensar nesses métodos como pedidos feitos para os objetos alterarem seus estados.

## {.smaller}

É muito comum que classes tenham métodos modificadores que recebem um novo valor para um de seus atributos.

- Nós não temos métodos desse tipo na classe `MaquinaIngressos`.
- Mas podemos pensar, por exemplo, que uma classe `Pessoa` que tenha um atributo `nome`, poderia ter o método:

. . .

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
  public void definirNome(String novoNome)
  {
    nome = novoNome;
  }
```
:::

. . .

:::: {.columns}

::: {.column width="20%"}
![](imagens/fica_a_dica.png)
:::

::: {.column width="80%"}
::: {.callout-note title="Convenção" appearance="simple" icon=false}
Em inglês, assim como os métodos de acesso começam com `get`, os métodos modificadores costumam começar com a palavra `set`.

- Poderíamos ter, por exemplo, o método `setName`.
- Nesse caso é também comum usarmos a palavra `set` em códigos em português. Ex.: `setNome`.
:::
:::

::::


## {.smaller}

::: {.callout-tip title="Conceito" icon=false}
**Métodos modificadores** mudam o estado de um objeto.
:::

. . .

::: {.fragment .nonincremental}
::: {.callout-note title="Exercício" icon=false}
Crie uma máquina de ingressos e chame o método `obterSaldo`.

- Em seguida, chame o método `inserirDinheiro` passando uma quantidade maior que zero.
- Chame novamente o método `obterSaldo`.
- As duas chamadas do método `obterSaldo` retornaram o mesmo valor? Por que?
:::
:::

## {.smaller}

Vamos analisar agora o código do método `inserirDinheiro`.

. . .

```{.java code-line-numbers="false"}
  /**
   * Recebe uma quantidade de dinheiro de um cliente.
   */
  public void inserirDinheiro(int quantidade)
  {
      saldo = saldo + quantidade;
  }
```

. . .

Repare que o método tem retorno do tipo [`void`]{.alert}.

- Isso significa que o método **não retorna nenhum valor**.
- No BlueJ percemos que a diferença é que não aparece a caixa de diálogo quando chamamos métodos desse tipo.
- A diferença no corpo do método é que ele **não tem comando de retorno**.

## {.smaller}

::: {.callout-note title="Exercício" icon=false}
Avaliando apenas a assinatura abaixo, você saberia dizer se ela é de um construtor ou de um método?
```{.java code-line-numbers="false"}
  public void setPreco(int custo)
```
:::

::: {.callout-note title="Exercício" icon=false}
Complete o código do método anterior de modo que ele atualize o valor de um atributo `preco`.
:::

## Quiz 2.4 {background-color="#f7fad1" .smaller}

::: {.nonincremental}
[Marque a alternativa incorreta:]{.alert}

a. Métodos de acesso geralmente retornam o valor de um atributo.
b. Métodos modificadores mudam o estado do objeto.
c. Os nomes dos métodos de acesso obrigatoriamente começam com a palavra `get`.
d. Métodos com retorno do tipo `void` não retornam nenhum valor.
:::


# Imprimindo a partir de métodos {background-color="#40666e"}

## {.smaller}

O método `imprimirIngresso` é o mais complexo da classe.

. . .

```{.java code-line-numbers="false"}
  /**
   * Imprime um ingresso.
   * Atualiza o total coletado e reduz o saldo para zero.
   */
  public void imprimirIngresso()
  {
    // Simula a impressão de um ingresso
    System.out.println("##################");
    System.out.println("# Ingressos & Cia ");
    System.out.println("# Ingresso");
    System.out.println("# " + preco + " centavos.");
    System.out.println("##################");
    System.out.println();

    // Atualiza o total coletado com o saldo
    total = total + saldo;
    // Zera o saldo
    saldo = 0;
  }
```

. . .

Você deve ter notado que, ao chamar o método, o seguinte texto aparece no terminal.

```
##################
# Ingressos & Cia 
# Ingresso
# 500 centavos.
##################
```

## {.smaller}

Vamos avaliar o método passo a passo.

```{.java code-line-numbers="false"}
  /**
   * Imprime um ingresso.
   * Atualiza o total coletado e reduz o saldo para zero.
   */
  public void imprimirIngresso()                     // <1>
  {
    // Simula a impressão de um ingresso
    System.out.println("##################");        // <2>
    System.out.println("# Ingressos & Cia ");        // <2>
    System.out.println("# Ingresso");                // <2>
    System.out.println("# " + preco + " centavos."); // <2>
    System.out.println("##################");        // <2>  
    System.out.println();

    // Atualiza o total coletado com o saldo
    total = total + saldo;                           // <3>
    // Zera o saldo
    saldo = 0;                                       // <4>
  }
```
1. A assinatura indica que o método tem retorno `void` e não espera nenhum parâmetro.
2. Os primeiros seis comandos imprimem o que vemos no terminal.
3. O sétimo comando adiciona o saldo atual inserido pelo usuário ao total acumulado.
4. O último comando retorna o saldo para zero, esperando o próximo usuário.

## {.smaller}

O método `imprimirIngresso` chama várias vezes o método `println` do objeto `System.out`.

- O objeto `System.out` é construído dentro da linguagem Java.
- O que está dentro dos parênteses é o argumento que estamos passando para o método: alguma string.

. . .

A maioria das chamadas do método `println` passa uma string **literal**.

- Ex.: `"# Ingressos & Cia "`.
- Isso significa que o método simplesmente exibe na tela o texto passa  do entre aspas duplas.

## {.smaller}

Mas veja que a linha abaixo é um pouco diferente.

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
    System.out.println("# " + preco + " centavos.");    
```
:::

. . .

Essa linha tem duas coisas diferentes.

- O operador `+` está sendo usado para concatenar (juntar) strings, criando uma nova string.
  - Ex.: `"Tião" + " " + "Silva"` resulta em `"Tião Silva"`.
- Mas, além disso, o atributo `preco` está sendo concatenado diretamente na string.
  - Java converte valores automaticamente para String quando o operador `+` é usado.
  - Repare que se digitássemos `"preco"`, seria exibida a palavra *preco* e não o valor do atributo `preco`.

. . .

Outra linha diferente é a última chamada do método `println`.

- Quando o método é chamado sem nenhum argumento, uma linha em branco é deixada no terminal.

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
    System.out.println();
```
:::


## {.smaller}

::: {.callout-note title="Exercício" icon=false}
O que exatamente será exibido na tela pelo comando abaixo.
```{.java code-line-numbers="false"}
  System.out.println("Orgulho de ser UFLA!")
```
:::

::: {.callout-note title="Exercício" icon=false}
Adicione um método `imprimirPreco` à classe `MaquinaIngressos`.
O método deve ter retorno `void`, não ter nenhum parâmetro e exibir uma mensagem como a abaixo.
```
  O preço do ingresso é X centavos
```
Onde no lugar de X deve aparecer o valor do atributo `preco`.
:::

::: {.callout-note title="Exercício" icon=false}
Cria duas máquinas de ingressos com valores de ingresso diferentes.
Ao chamar o método `imprimirPreco` para as duas máquinas, o texto exibido é igual ou diferente?
Por que?
:::

# Entregas dessa Aula {background-color="#40666e"}

## {.smaller}

::: {.nonincremental}

Como você já viu na aula anterior, para que você tenha a [presença]{.alert} 

- considerada nas aula em [formato ANP]{.alert} (Atividade Não-Presencial), 
- você precisa **demonstrar que** realmente **estudou** o conteúdo.

::: {.callout-important title="Entregas no Campus Virtual"}
Para ter presença nessa aula você deve responder, no Campus Virtual, aos quizes presentes nesses slides.
:::
:::