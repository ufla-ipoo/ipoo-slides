---
title: PPOO - Técnicas de Abstração Adicionais
subtitle: Aula 4.7 - Teórica
---

## Principais Conceitos da Aula {.smaller}

::: {.nonincremental}
- Classes Abstratas
- Interfaces
- Herança Múltipla
:::

. . .

Construções Java do capítulo

::: {.nonincremental}
- `abstract`, `implements`, `interface`
:::

. . .

Nesta aula vamos aprofundar nas **técnicas** relacionadas a **herança** que podem ser usadas
para **melhorar a estrutura** das classes e **aumentar a manutenibilidade e extensibilidade** do código.

- Veremos um projeto de exemplo que aborda uma **simulação** e com ele discutiremos novamente
  os conceitos de [herança]{.alert}, [polimorfismo]{.alert}, [classes abstratas]{.alert} e [interfaces]{.alert}.


# Simulações {background-color="#40666e"}

## {.smaller}

É muito comum usarmos computadores para **simularmos** fenômenos do mundo real.

. . .

Alguns exemplos são sistemas que:

- modelam o tráfego em uma cidade
- modelam a previsão do tempo
- simulam o espalhamento de uma doença
- analisam o mercado de ações de uma bolsa de valores
- e muitos outros.

. . .

Qualquer simulação faz uso das técnicas de **abstração**, pois tenta modelar o comportamento de um subconjunto do mundo real.

- Decidir quais detalhes devem ser incluídos é geralmente um desafio.
- Mais detalhes podem levar a uma simulação mais precisa, mas que requer mais esforço de programação e mais equipamento e tempo de execução.

## {.smaller}

De todo modo, simulações são muito úteis pois permitem fazer o que muitas vezes não conseguimos no mundo real.

- Seja porque não temos controle sobre o comportamento real (ex.: clima).
- Ou porque é muito caro, ou muito perigoso.

. . .

A ideia de uma simulação é então **experimentar cenários** para responder perguntas do tipo **"e se"**.

- Um exemplo seria tentar investigar o efeito da ação humana em habitats naturais.
- Imagine a construção de uma rodovia no meio de uma reserva ecológica, por exemplo.
- Como isso afeta a fauna e flora do local?
- Faz diferença dividir a reserva em duas partes? Muda alguma coisa para os animais que vivem ali?

## {.smaller}

Nesta aula vamos trabalhar em um projeto inspirado nessa ideia de simular o comportamento de animais em um habitat natural.

- Mas, como o objetivo é **ilustrar conceitos de design e implementação OO**, vamos tratar uma simulação bem simplificada.
- De todo modo, nem sempre uma simulação mais complexa leva a um resultado mais preciso.
- Muitas vezes, uma simulação mais simples pode ser mais útil.

# A simulação raposas-e-coelhos {background-color="#40666e"}

## {.smaller}

O projeto que vamos usar de exemplo é uma **simulação do tipo predador-presa**.

- Esse tipo de simulação é muito comum em biologia, e é usado para estudar a variação no tamanho das populações de predadores e presas.
- Uma grande população de presas fornece comida para uma pequena população de predadores.
- Mas, se a população de predadores crescer demais, a população de presas pode diminuir muito (ou até desaparecer).
- Além disso, o tamanho do habitat natural também influencia o tamanho das populações, pois pode facilitar ou dificultar que os predadores encontrem suas presas.

. . .

O projeto que vamos usar segue a mesma ideia do World of Zuul que trabalhamos nas aulas de Design de Classes,

- no sentido de que é um projeto que funciona corretamente do ponto de vista do usuário;
  - mas que tem problemas de design e implementação.
- Especialmente por não utilizar os conceitos de herança que vimos nas últimas aulas.

## {.smaller}

O projeto [raposas-e-coelhos-v1](https://github.com/ufla-ppoo/raposas-e-coelhos-v1) está disponível no repositório do curso.

- O diagrama abaixo mostra as classes do projeto.

. . .

![](imagens/raposas-e-coelhos_diagrama_classes.png){width=60%}

## {.smaller}

![](imagens/raposas-e-coelhos_diagrama_classes.png){width=45%}

As principais classes que vamos focar são `Simulador`, `Raposa`  e `Coelho`.

- As classes `Raposa` e `Coelho` representam o comportamento do predador e da presa, respectivamente.
- Trataremos principalmente os aspectos que afetam o tamanho de suas populações: nascimento, morte e fornecimento de comida.

## {.smaller}

A classe `Simulador` é responsável por criar o estado inicial da simulação, controlá-la e executá-la.

- A ideia básica é simples:
  
  - o simulador tem coleções de coelhos e raposas.
  - a cada passo da simulação, a classe permite que cada animal possa viver por um _passo_ de seu ciclo de vida.
    - não estamos preocupados sobre quanto tempo significa um passo aqui.
  - e então o estado atual do campo é mostrado na tela.

## {.smaller}

Resumidamente, o objetivo das demais classes é:

- `Campo` representa um campo de duas dimensões onde os animais vivem. 
  
  - O campo é formado por um número fixo de localizações (células), arranjadas em linhas e colunas.
  - Apenas um animal pode ocupar uma localização por vez.
  - Uma localização pode estar vazia ou ocupada por um animal.

- `Localizacao` representa uma célula dentro do campo, definida por um valor de linha e um de coluna.

- As classes `Simulador`, `Raposa`, `Coelho`, `Campo` e `Localizacao` definem completamente o comportamento da simulação.

  - As demais classes são acessórias.

## {.smaller}

- A classe `Randomizador` nos permite ter um certo grau de controle sobre a aleatoriedade da simulação.
  - Ex.: quando os animais nascem.

- As classes `VisaoSimulador`, `EstatisticasCampo` e `Contador` fornecem uma visualização gráfica da simulação.
  - `VisaoSimulador` exibe uma visualização do estado do campo.
  - `EstatisticasCampo` mostra as quantidades de coelhos e raposas.
  - `Contador` é uma classe auxiliar que trata a contagem dos animais.

  