---
title: PPOO - Técnicas de Abstração Adicionais
subtitle: Aula 4.7 - Teórica
---

## Principais Conceitos da Aula {.smaller}

::: {.nonincremental}
- Classes Abstratas
- Interfaces
- Herança Múltipla
:::


[]: ATENÇÃO ***
[]: Esse material foi criado para PPOO e, portanto usa projeto no VS Code.
[]: Além disso, ele é apresentado depois de uma aula na qual os conceitos de classes abstratas e interfaces foram apresentados.
[]: Portanto, o material do livro foi alterado, de forma que esses conceitos não são explicados novamente, apenas usados e reforçados.

. . .

Construções Java do capítulo

::: {.nonincremental}
- `abstract`, `implements`, `interface`
:::

. . .

Nesta aula vamos aprofundar nas **técnicas** relacionadas a **herança** que podem ser usadas
para **melhorar a estrutura** das classes e **aumentar a manutenibilidade e extensibilidade** do código.

- Veremos um projeto de exemplo que aborda uma **simulação** e com ele discutiremos novamente
  os conceitos de [herança]{.alert}, [polimorfismo]{.alert}, [classes abstratas]{.alert} e [interfaces]{.alert}.

## {.smaller}

Estes slides se baseiam no [Cap. 10 do livro]{.alert} do Barnes e Kölling.

. . .

:::: {.columns}

::: {.column width="30%"}
![](imagens/livro_bluej.png){fig-alt="Capa do livro do Barnes e Kolling." fig-align="left"}
:::

::: {.column width="70%"}
- A diferença é que o livro apresenta os conceitos de **classe abstrata**, **método abstrato** e **interface** neste capítulo, já estes slides consideram que esses conceitos já foram apresentados. 
- Além disso, ele se baseia em um projeto a ser executado no VS Code, enquanto o livro se baseia no BlueJ.
:::

::::

. . . 

**Dica**: vale a pena estudar pelo livro, porque ele apresenta bem mais detalhes do que os apresentados aqui.

# Simulações {background-color="#40666e"}

## {.smaller}

É muito comum usarmos computadores para **simularmos** fenômenos do mundo real.

. . .

Alguns exemplos são sistemas que:

- modelam o tráfego em uma cidade
- modelam a previsão do tempo
- simulam o espalhamento de uma doença
- analisam o mercado de ações de uma bolsa de valores
- e muitos outros.

. . .

Qualquer simulação faz uso das técnicas de **abstração**, pois tenta modelar o comportamento de um subconjunto do mundo real.

- Decidir quais detalhes devem ser incluídos é geralmente um desafio.
- Mais detalhes podem levar a uma simulação mais precisa, mas que requer mais esforço de programação e mais equipamento e tempo de execução.

## {.smaller}

De todo modo, simulações são muito úteis pois permitem fazer o que muitas vezes não conseguimos no mundo real.

- Seja porque não temos controle sobre o comportamento real (ex.: clima).
- Ou porque é muito caro, ou muito perigoso.

. . .

A ideia de uma simulação é então **experimentar cenários** para responder perguntas do tipo **"e se"**.

- Um exemplo seria tentar investigar o efeito da ação humana em habitats naturais.
- Imagine a construção de uma rodovia no meio de uma reserva ecológica, por exemplo.
- Como isso afeta a fauna e flora do local?
- Faz diferença dividir a reserva em duas partes? Muda alguma coisa para os animais que vivem ali?

## {.smaller}

Nesta aula vamos trabalhar em um projeto inspirado nessa ideia de simular o comportamento de animais em um habitat natural.

- Mas, como o objetivo é **ilustrar conceitos de design e implementação OO**, vamos tratar uma simulação bem simplificada.
- De todo modo, nem sempre uma simulação mais complexa leva a um resultado mais preciso.
- Muitas vezes, uma simulação mais simples pode ser mais útil.

# A simulação raposas-e-coelhos {background-color="#40666e"}

## {.smaller}

O projeto que vamos usar de exemplo é uma **simulação do tipo predador-presa**.

- Esse tipo de simulação é muito comum em biologia, e é usado para estudar a variação no tamanho das populações de predadores e presas.
- Uma grande população de presas fornece comida para uma pequena população de predadores.
- Mas, se a população de predadores crescer demais, a população de presas pode diminuir muito (ou até desaparecer).
- Além disso, o tamanho do habitat natural também influencia o tamanho das populações, pois pode facilitar ou dificultar que os predadores encontrem suas presas.

. . .

O projeto que vamos usar segue a mesma ideia do World of Zuul que trabalhamos nas aulas de Design de Classes,

- no sentido de que é um projeto que funciona corretamente do ponto de vista do usuário;
  - mas que tem problemas de design e implementação.
- Especialmente por não utilizar os conceitos de herança que vimos nas últimas aulas.

## {.smaller}

O projeto [raposas-e-coelhos-v1](https://github.com/ufla-ppoo/raposas-e-coelhos-v1) está disponível no repositório do curso.

- O diagrama abaixo mostra as classes do projeto.

. . .

![](imagens/raposas-e-coelhos_diagrama_classes.png){width=60%}

## {.smaller}

![](imagens/raposas-e-coelhos_diagrama_classes.png){width=45%}

As principais classes que vamos focar são `Simulador`, `Raposa`  e `Coelho`.

- As classes `Raposa` e `Coelho` representam o comportamento do predador e da presa, respectivamente.
- Trataremos principalmente os aspectos que afetam o tamanho de suas populações: nascimento, morte e fornecimento de comida.

## {.smaller}

A classe `Simulador` é responsável por criar o estado inicial da simulação, controlá-la e executá-la.

- A ideia básica é simples:
  
  - o simulador tem coleções de coelhos e raposas.
  - a cada passo da simulação, a classe permite que cada animal possa viver por um _passo_ de seu ciclo de vida.
    - não estamos preocupados sobre quanto tempo significa um passo aqui.
  - e então o estado atual do campo é mostrado na tela.

## {.smaller}

Resumidamente, o objetivo das demais classes é:

- `Campo` representa um campo de duas dimensões onde os animais vivem. 
  
  - O campo é formado por um número fixo de localizações (células), arranjadas em linhas e colunas.
  - Apenas um animal pode ocupar uma localização por vez.
  - Uma localização pode estar vazia ou ocupada por um animal.

- `Localizacao` representa uma célula dentro do campo, definida por um valor de linha e um de coluna.

- As classes `Simulador`, `Raposa`, `Coelho`, `Campo` e `Localizacao` definem completamente o comportamento da simulação.

  - As demais classes são acessórias.

## {.smaller}

- A classe `Randomizador` nos permite ter um certo grau de controle sobre a aleatoriedade da simulação.
  - Ex.: quando os animais nascem.

- As classes `VisaoSimulador`, `EstatisticasCampo` e `Contador` fornecem uma visualização gráfica da simulação.
  - `VisaoSimulador` exibe uma visualização do estado do campo.
  - `EstatisticasCampo` mostra as quantidades de coelhos e raposas.
  - `Contador` é uma classe auxiliar que trata a contagem dos animais.

## 

::: {.callout-note title="Exercício" icon=false}
Inicie o projeto `raposas-e-coelhos-v1`.
Você verá o estado inical da simulação.
Os retângulos em maior número representam os coelhos e os demais as raposas.

Acione o botão **Simular um Passo**.
O número de raposas se altera se você aciona o botão apenas uma vez?
:::

. . .

::: {.callout-note title="Exercício" icon=false}
O número de raposas se altera a cada passo da simulação?

Quais processos naturais vocês acha que estão sendo modelados para fazer o número
de raposas aumentar ou diminuir?
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Acione agora o botão **Simular Vários Passos** e escolha uma grande quantidade de passos (como 80 ou 100).

O número de raposas e coelhos aumentam ou diminuem na mesma taxa?
::: 

## 

::: {.callout-note title="Exercício" icon=false}
Quais mudanças vocês nota ao executar o botão de **Simulação Longa**?
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Acione o botão `Reiniciar` para criar um novo estado inicial para a simulação e
rode a simulação novamente.

A simulação é exatamente igual dessa vez? 
Se não é, você nota algum padrão similar entre as execuções?
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Se você executa a simulação por tempo suficiente, acontece de todas as raposas ou
coelhos morrerem?

Em caso afirmativo, por que você acha que isso acontece?
:::

## 

::: {.callout-note title="Exercício" icon=false}
O botão **Reiniciar Randomizador** chama o método `reiniciar` da classe `Randomizador` e
também da classe `Simulador`.
Isso faz com que a simulação seja exetamente igual à primeira simulação executada.

Verifique o código da classe `Randomizador` e a documentação da classe `java.util.Random`
para entender porque isso acontece.
:::

## A classe `Coelho` {.smaller}

Abra o código da classe `Coelho`.

- Você notará que a classe tem vários atributos estáticos que definem as configurações de todos os coelhos.
- O controle de aleatoriedade é centralizado através de um único objeto `Random` fornecido pela classe `Randomizador`.
  - Isso permite a repetibilidade dos testes da simulação.
- Cada coelho tem quatro atributos comuns (não estáticos), que descrevem seu estado.
  - idade (dada pelo número de passos), se está vivo ou não, e sua localização específica no campo.
- Você notará também as simplificações feitas na simulação e como a aleatoriedade é tratada.

## 

::: {.callout-note title="Exercício" icon=false}
Você acha que não ter um atributo `gênero`, para indicar se o coelho é macho ou fêmea,
provavelmente leva a uma simulação imprecisa?

Justifique sua resposta.
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Você acha que há outras simplificações na implementação da classe `Coelho` em relação ao mundo real?

Discuta se isso poderia impactar na precisão da simulação.
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Experimente alterar alguns dos atributos da classe `Coelho` e verifique como isso impacta o comportamento
da simulação.

Por exemplo: o que acontece se a probabilidade de reprodução for muito maior ou muito menor?
:::

[]: TODO: Não foi colocado o texto do livro após os exercícios, considerando que a aula é presencial.

## A classe `Raposa` {.smaller}

Abra o código da classe `Raposa`.

- Você verá que ele tem muitas similaridades com a classe `Coelho`.
- As diferenças se referem, principalmente, aos comportamentos de `cacar` (caçar) e `buscarComida`.

## 

::: {.callout-note title="Exercício" icon=false}
Assim como foi feito para os coelhos, avalise se as simplificações implementadas na classe `Raposa`
podem levar a uma simulação imprecisa.
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Se aumentarmos a idade máxima das raposas, você acha que a população das raposas vai aumentar, ou
é mais provável que a população de coelhos seja reduzida a zero?
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Experimente diferentes valores para os atributos das classes `Coelho` e `Raposa`.

Alguma espécie sempre desaparece em alguma configuração específica?

Há configurações que são mais estáveis, ou seja, geram um equilíbrio entre as populações por mais tempo?
:::


##

::: {.callout-note title="Exercício" icon=false}
Experimente alterar o método `main` da classe `App`, chamando o construtor sobrecarregado da
classe `Simulador` para definir campos de tamanhos diferentes.

O tamanho do campo afeta a probabilidade das espécies sobreviverem?
:::

. . .

[]: TODO: deixar esses exercícios para a aula prática? ==========================

::: {.callout-note title="Exercício" icon=false}
Atualmente, uma raposa come no máximo um coelho em cada passo.

Modifique o método `buscarComida` para que os coelhos em todos os locais vizinhos sejam comidos
em um único passo. Avalie o impacto dessa alteração nos resultados da simulação.

Observe que o método `buscarComida` atualmente retorna a localização do único coelho que é comido, 
portanto, você precisará retornar a localização de um dos coelhos comidos na sua versão.

No entanto, não se esqueça de retornar `null` se não houver coelhos para comer.
:::

## 

::: {.callout-note title="Exercício" icon=false}
Seguindo o exercício anterior, se uma raposa comer vários coelhos de uma só vez, existem diversas 
possibilidades de como podemos modelar seu nível de comida. 

Se somarmos todos os valores de comida dos coelhos, a raposa terá um nível de comida muito alto, 
tornando improvável que ela morra de fome tão cedo. 

Alternativamente, poderíamos impor um limite ao nível de comida da raposa. 
Isso modela o efeito de um predador que mata a presa independentemente de estar com fome ou não. 

Altere o código para tratar esse limite e avalie os impactos da implementação dessa escolha na 
simulação resultante.
:::

[]: Experimentar primeiro valor grande como 100 e ir diminuindo até 30.

## A classe `Simulador` {.smaller}

Vamos agora analisar o código da classe `Simulador`.

- Ela é peça principal do sistema, pois ela controla todas as outras partes.
- As principais partes são o construtor e os métodos `povoar` e `simularUmPasso`.
- Repare que o método `povoar` criaos amimais com idades aleatórias.
  - Isso representa mais corretamente uma população variada que seria um estado normal da simulação.
  - Além disso, se todos os animais começassem recém-nascidos, até que eles tivessem idade para se reproduzir,
    pode ser que os coelhos fossem todos caçados ou as raposas morressem de fome.
- O método `simularUmPasso` é o responsável por fazer a simulação de um passo.

[]: TODO: Não foi colocado o texto do livro, considerando que a aula é presencial.

## 

::: {.callout-note title="Exercício" icon=false}
Experimente alterar o método `povoar` para que os coelhos e raposas comecem com idade inicial zero.

Execute várias simulações e verifique se isso é sempre catastrófico.
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Se apenas os coelhos tiverem uma idade inicial aleatória, a população de coelhos tenderá a crescer, 
enquanto a população de raposas permanecerá muito pequena.

Quando as raposas atingirem idade suficiente para se reproduzir, a simulação tende a se comportar
novamente como a versão original?

O que isso sugere sobre os tamanhos relativos das populações iniciais e seu impacto no resultado da simulação?
:::

## A classe `Simulador` {.smaller}

Avalie agora o código da classe `simularUmPasso`.

- Repare que não estamos usando herança nesta implementação.
- Repare também como são tratadas as listas de coelhos e raposas (e como elas são atualizadas com os recém-nascidos).

## Começando a melhorar a simulação {.smaller}

Agora que entendemos como a simulação funciona, já podemos começar a melhorar o design e a implementação do projeto.

- Faremos isso passo a passo.
- Poderíamos começar por vários pontos, mas um **ponto fraco** óbvio **do design** atual é que ele **não usa herança**.
  - Que poderia **evitar** diversas **replicações de código** entre as classes `Coelho` e `Raposa`.

## 

::: {.callout-note title="Exercício" icon=false}
Identifique as semelhanças e diferenças entre as classes `Coelho` e `Raposa`.

Faça listas separadas dos atributos, métodos e construtores e diferencie entre os atributos estáticos e ​​de instância.
:::

. . .

::: {.nonincremental}

::: {.callout-note title="Exercício" icon=false}
Métodos idênticos nas subclasses são claramente candidatos a serem levados para uma superclasse.

Quais métodos são realmente idênticos nas classes `Coelho` e `Raposa`? Para chegar a uma conclusão, considere:

- se faz diferença a flexão de gênero (como `vivo` ou `viva`);
- como se os valores dos atributos estáticos fossem usados diretamente no código.
:::

:::

## 

::: {.callout-note title="Exercício" icon=false}
Na versão atual da simulação, os valores de todos os atributos estáticos com nomes semelhantes são diferentes.

Se os dois valores de um atributo estático específico (como `IDADE_REPRODUCAO`, por exemplo) fossem idênticos, 
isso faria alguma diferença na sua avaliação de quais métodos são realmente idênticos?
:::


# Classes Abstratas {background-color="#40666e"}

## {.smaller}

Nós já conhecemos os conceitos de [herança]{.alert} e [polimorfismo]{.alert}

- E, por isso, sabemos que como `Coelho` e `Raposa` têm muitas características em comum, 
  - elas podem ser tornar subclasse de uma classe chamada `Animal`, por exemplo.
- Vamos agora começar a fazer modificações para melhorar o design e a implementação do sistema.
- Nós já sabemos que, pelo polimorfismo, evitaremos replicação de código 
  - e simplificaremos o código da classe `Simulador`, que usa as classes `Coelho` e `Raposa`.

. . .

É importante ressaltar que vamos realizar um processo de [refatoração]{.alert} que não
deve alterar o comportamento do sistema do ponto de vista do usuário final.

## A superclasse Animal {.smaller}

Vamos começar levando para a classe `Animal` aquilo que é idêntico nas duas subclasses.

- Vamos levar os atributos `vivo(a)`, `localizacao` e `campo` para a superclasse.
  - O atributo `idade` discutiremos mais adiante.
  - Os atributos serão criados com visibilidade privada para respeitar o encapsulamento.
  - O atributo `vivo` será inicializado com `true` no construtor, e os demais serão passados pelas subclasses usando `super`.

## A superclasse Animal {.smaller}

Os métodos de acesso e modificadores desses atributos devem também ser levados para superclasse.

- Mas qual deve ser a visibilidade deles?
- `definirLocalizacao` é privado em `Coelho` e `Raposa`, mas não pode permanecer privado em `Animal` pois
  é usado por métodos que estão nas subclasses.
  - Devemos definir então como `protected`.
- `morrer` era público em `Coelho` mas privado em `Raposa`. Deveria ser público em `Animal`?
  - Só era público em `Coelho` porque `Raposa` precisava chamar o método.
  - Agora que as classes são irmãs, o método pode ser `protected`, indicando que ele não
    faz parte da interface geral dos animais (pelo menos até agora).

## A superclasse Animal {.smaller}

Outro ponto importante sobre a classe `Animal` é que nós nunca vamos instanciar um objeto dessa classe.

- Portanto, sabemos que ela deve ser **abstrata**.

. . .

::: {.callout-tip title="Conceito" icon=false}
Uma **classe abstrata** é uma classe que não é criada para ser instanciada.
Seu propósito é servir como uma superclasse para outras classes.
Classes abstratas podem conter métodos abstratos.
:::


## {.smaller}

Uma tarefa importante quando refatoramos um sistema é planejar testes que garantam que o sistema
continua funcionando como antes do ponto de vista do usuário.

- A classe `Randomizador` existe para ajudar nesse processo. 
- Pois sabemos que, ao reiniciar o randomizador, o comportamento da simulação é sempre o mesmo.
- Assim, podemos implementar a classe `Animal` em uma cópia do projeto e comparar as simulações
antes e depois das alterações.

## 

::: {.callout-note title="Exercício" icon=false}
Crie a classe `Animal` em uma cópia do projeto de acordo com o que foi apresentado anteriormente.

Garanta que a simulação continua funcionando como antes do ponto de vista do usuário.
:::

::: {.callout-note title="Exercício" icon=false}
Discuta sobre como o conceito de herança melhorou o projeto até agora.
:::

# Métodos Abstratos {background-color="#40666e"}

## {.smaller}

Até agora a superclasse `Animal` ajudou a evitar replicação de código nas subclasses `Coelho` e `Raposa`.

- E também tornou mais fácil incluir um novo tipo de animal na simulação, se necessário.

. . .

Mas nós já samos que o uso inteligente de herança ajudaria a simplificar também o código da classe cliente,

- ou seja, da classe que usa a hierarquia de herança, que, nesse caso, é a classe `Simulador`.

## {.smaller}

A classe `Simulador` tem uma lista separada para cada espécie de animal.

- E sabemos que, com o `polimorfismo`, podemos usar uma única lista para armazenar todos os animais.

. . .

Mas surge um problema na hora de fazer isso, ao tratar o método `simularUmPasso`.

- Nós ainda precisamos trabalhar com tipos específicos de animais para saber qual método devemos chamar.
- Já que, para os coelhos deve ser chamado o método `correr`,
  - e para as raposas o método `cacar`.
- Uma maneira tratar isso é usar `instanceof` e _type casting_.
  - Mas esse é um sinal de que não estamos aproveitando tudo que a herança pode nos oferecer.

. . . 

Que solução melhor poderíamos adotar?

## {.smaller}

Poderíamos criar um método na superclasse `Animal` e sobrescrevê-lo nas subclasses,

- de forma que uma chamada ao método polimórfico faria com que cada animal agisse de forma diferente.

. . .

Essa é uma técnica de refatoração padrão para esses casos

- nos quais nós temos um comportamento que é específico dos subtipos,
- mas que precisa ser chamado de um contexto que lida apenas com o supertipo.

## {.smaller}

Nós podemos então criar um método chamado `agir` na superclasse `Animal` e sobrescrevê-lo nas subclasses.

- E renomear os métodos de ação específicos (`correr` em `Coelho` e `cacar` em `Raposa`) para `agir`.
- Dessa forma, em vez da simulação dizer a cada animal exatamente o que fazer, 
  - estamos apenas dizendo a ele para _agir_, 
  - e deixando que o próprio animal decida exatamente o que quer fazer.

. . .

Dessa forma, estamos *reduzindo o acoplamento* entre a classe `Simulador` e as subclasses `Coelho` e `Raposa`.

## {.smaller}

E o que seria implementado no método `agir` da classe `Animal`?

- Não temos nada a implementar, certo? Como o método deve ser definido então?
- Como um [método abstrato]{.alert}.

. . .

::: {.callout-tip title="Conceito" icon=false}
Uma **método abstrato** possui apenas assinatura e não tem um corpo. 
Ele é marcado com a palavra-chave `abstract`.
:::

. . .

::: {.callout-tip title="Conceito" icon=false}
**Subclasse abstrata**.
Para que uma subclasse de uma classe abstrata se torne concreta, ela deve
fornecer implementações para todos os métodos abstratos herdados. 
Caso contrário, a própria subclasse será abstrata.
:::

## 

::: {.callout-note title="Exercício" icon=false}
Altere o projeto incluindo o método `agir` conforme discutido anteriormente.

Obs.: como agora todos os animais fazem parte de uma única lista, e o sistema possui
aleatoriedade, a ordem que os animais agem não vai mais ser a mesma de antes dessa alteração.
Portanto, não é mais possível comparar exatamente duas simulações (antes e depois das alterações)
como fizemos anteriormente.
:::

. . . 

::: {.callout-note title="Exercício" icon=false}
Explique porque não seria possível implementar de forma adequada o método `agir` se
a lista de animais guardasse objetos do tipo `Object` em vez de `Animal`.
:::

. . . 

::: {.callout-note title="Exercício" icon=false}
Explique como o método `simularUmPasso` da classe `Simulador` utiliza o conceito de polimorfismo.

Em sua resposta, inclua os conceitos de **variável polimórfica**, **tipo estático**, **tipo dinâmico**, 
**dynamic dispatch** e **polimorfismo de método**.
:::

## {.smaller}

As últimas alterações que fizemos no simulador removeram as dependências (acoplamentos) do método 
`simularUmPasso` com as classes `Coelho` e `Raposa`. 

- A classe `Simulador`, no entanto, ainda está acoplada às classes `Coelho` e `Raposa`, porque essas 
classes são referenciadas no método `povoar`. 
- Não há como evitar isso, pois quando criamos instâncias de animais, precisamos especificar exatamente 
que tipo de animal criar. 

. . .

Mas isso poderia ser melhorado dividindo `Simulador` em duas classes: 

- uma classe, `Simulador`, que executa a simulação e é completamente desacoplada das classes 
concretas de animais,
- e outra classe, `GeradorDePopulacoes` (criada e chamada pelo simulador), que cria a população. 
  - Somente esta classe está acoplada às classes concretas de animais, facilitando para um programador 
de manutenção encontrar pontos onde a mudança é necessária quando o aplicativo for estendido
(quando for incluída uma nova espécie de animal, por exemplo).

##  

::: {.callout-note title="Exercício" icon=false}
Tente implementar a refatoração citada, criando a classe `GeradorDePopulacoes`.
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Para remover completamente o acoplamento entre `Simulador` e as classes concretas de animais,
é necessário que a classe `GeradorDePopulacoes` também trate a definição das cores dos animais.

Se ainda não tratou isso, trate agora.
:::

## {.smaller}

::: {.nonincremental}

O projeto [raposas-e-coelhos-v2](https://github.com/ufla-ppoo/raposas-e-coelhos-v2), 
disponível no repositório do curso, tem as melhorias de design e alterações que discutimos até agora.

- Mas **atenção**: a melhor maneira de estudar esse material é tentar implementar
as mudanças você mesmo no projeto `raposas-e-coelhos-v1` e só depois comparar com o projeto `raposas-e-coelhos-v2`.
- Estudar apenas lendo o código pronto não é uma boa prática, pois o aprendizado não é o mesmo.
- É muito mais efetivo aprender fazendo do que apenas lendo. 

:::

## {.smaller}

O repositório do curso também tem o projeto [raposas-e-coelhos-v2-grafico](https://github.com/ufla-ppoo/raposas-e-coelhos-v2-grafico).

- Esse projeto tem a mesma modelagem de simulação do projeto v2.
- Mas acrescenta um gráfico de acompanhamento da simulação.

#

::: {.nonincremental}
::: {.callout-note title="Exercício" icon=false}
Execute o projeto `raposas-e-coelhos-v2-grafico` e observe o gráfico que ele exibe.

Escreva o que você acha que o gráfico representa.
Existe alguma relação entre as curvas apresentadas?
:::
:::

. . .

::: {.callout-note title="Exercício" icon=false}
Faça alguns experimentos alterando o tamanho do campo (especialmente tamanhos menores);

Os gráficos apresentados te dão algum _insight_ novo sobre o comportamento da simulação?
:::


# Métodos mais abstratos {background-color="#40666e"}

## {.smaller}

Quando identificamos as características comuns entre as classes `Coelho` e `Raposa`,
para criar a classe `Animal`, nós adiamos o tratamento do atributo `idade` e dos
métodos associados a ele.

- A princípio, parece que seria muito simples ter levado o atributo para a classe `Animal`, 
criado um método de acesso e levado o método modificador `incrementarIdade`.
- O problema é que o método `incrementarIdade` depende do atributo estático `IDADE_MAXIMA`,
que, apesar do mesmo nome, tem valores diferentes nas duas subclasses.
  - Portanto, não dá para simplesmente levar o atributo `IDADE_MAXIMA` para a superclasse.

. . .

Será que seria possível sobrescrever um atributo?

- Para os próximos exercícios, use o projeto `raposas-e-coelhos-v2-grafico` como base.

##

::: {.nonincremental}
::: {.callout-note title="Exercício" icon=false}
Leve o atributo `idade` das subclasses para a classe `Animal`. Para  isso, será necessário:

- Alterar os construtores das subclasses para que a inicialização completa da idade seja tratada na superclasse.
  - Com isso a classe `animal` vai precisar também de uma atributo randomizador.
- Criar um método de acesso para o atributo `idade` na superclasse, com visibilidade `protected`.
- Levar o método `incrementarIdade` para a superclasse.

A questão é que para o método `incrementarIdade` compilar na classe `Animal` precisaremos definir um
atributo estático `IDADE_MAXIMA` na superclasse.

- Será o que acontece se esse atributo existir na superclasse e nas subclasses?
  Funciona como uma sobrescrita dos métodos?
- Para verificar isso, define `IDADE_MAXIMA` com valor `1` na superclasse `Animal` e execute a simulação.
- O que acontece com a simulação?
:::
:::

## {.smaller}

Vimos que a simulação para no passo 2, pois todos os animais morrem.

- Isso aconteceu porque não existe sobrescrita de atributos.
- Assim, o valor usado para definir a idade dos animais foi aquele definido na classe `Animal` (e era `1`).

. . .

Já que a sobrescrita funciona apenas para métodos, e se criássemos um método **estático** para
retornar a idade máxima e tentarmos sobrescrever esse método nas subclasses?

##

::: {.nonincremental}
::: {.callout-note title="Exercício" icon=false}
Crie um método **estático** na superclasse `Animal` e nas subclasses `Coelho` e `Raposa`
para retornar o atributo `IDADE_MAXIMA`.

O código dos métodos será exatamente igual, mas precisamos disso porque apesar dos atributos
terem o mesmo nome (`IDADE_MAXIMA`), sabemos que são três atributos diferentes (um de cada classe).

Execute a simulação e verifique se o problema foi resolvido.
:::
:::

## {.smaller}

Veja que, mais uma vez, a simulação termina no passo 2 com todos os animais mortos.

- Mas por que isso aconteceu?

. . .

A questão é que também não existe sobrescrita de métodos estáticos.

- Isso acontece porque é o compilador que decide o método a ser chamado (no caso de métodos estáticos).

. . .

O que podemos fazer então?

## {.smaller}

::: {.nonincremental}
::: {.callout-note title="Exercício" icon=false}
Experimente remover a palavra-chave `static` do método que retorna a idade máxima e executar a simulação.
:::
:::

. . .

Veja que agora a idade máxima retornada é a da subclasse, o que resolve o problema.

- Mas, da forma que ficou, veja que a implementação do método na superclasse `Animal` é inútil.
  - Bem como a declaração do atributo `IDADE_MAXIMA` na superclasse.

. . . 

::: {.nonincremental}
::: {.callout-note title="Exercício" icon=false}
Remova o atributo `IDADE_MAXIMA` da superclasse `Animal`.

O método que retornava o atributo pode ser removido da classe `Animal`?

- Se não puder, como ele deve ser declarado?
:::
:::


##

::: {.nonincremental}
::: {.callout-note title="Exercício" icon=false}
Leve os métodos `podeProcriar` e `procriar` para superclasse `Animal`.

Nesse processo você dever criar os métodos necessários para garantir que os valores
idade de reprodução, a probabilidade de reprodução e o tamanho máximo de ninhada,
efetivamente usados, sejam os das subclasses.

Reflita sobre o nível de visibilidade adequado para cada método tratado.
:::
:::

. . .


::: {.nonincremental}
::: {.callout-note title="Exercício" icon=false}
As alterações que fizemos tiveram impacto em alguma outra classe do sistema?

Se não, o que isso sugere sobre os graus de encapsulamento e acoplamento que 
estavam presentes na versão original do projeto?
:::
:::

##

::: {.nonincremental}
::: {.callout-note title="Exercício" icon=false}
**DESAFIO**: as implementações dos métodos `reproduzir` nas classes `Coelho` e `Raposa`
são muito similares.
A diferença é que um cria objetos do tipo `Coelho` e o outro do tipo `Raposa`.

Usando a mesma ideia adotada para tratar o método `podeProcriar`, seria possível
mover o método `reproduzir` para a superclasse `Animal`?

_Dica_: as regras de substituição polimórfica se aplicam também a valores retornados
por métodos da mesma forma que é feita para atribuições e passagens de parâmetros.
:::
:::







